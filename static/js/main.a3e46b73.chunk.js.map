{"version":3,"sources":["contexts/Theme.tsx","styles/themes/dark/index.ts","styles/themes/dark/app.ts","styles/themes/dark/themeSwitcher.ts","styles/themes/light/app.ts","styles/themes/index.ts","styles/themes/light/index.ts","redux/modules/facts/types.ts","redux/modules/facts/reducers.ts","redux/modules/index.ts","redux/routing/routesMap.ts","utilities/api.ts","redux/saga/catFacts.ts","redux/saga/index.ts","redux/configureStore.ts","hooks/useTypedSelector.ts","components/ThemeSwitcher.tsx","views/BaseView.tsx","components/CatFact.tsx","redux/modules/facts/actions.ts","views/HomeView.tsx","views/RootView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Themes","colors","app","body","BG_COLOR","TEXT_COLOR","header","themeSwitcher","normal","BORDER_COLOR","active","circle","appColors","themes","dark","light","LOCAL_STORAGE_KEY","ThemeContext","createContext","toggleTheme","ThemeProvider","props","useState","theme","setTheme","useEffect","localStorage","getItem","setItem","useLayoutEffect","savedTheme","ctx","toggleTo","Provider","value","children","LocalActions","SagaActions","initialState","factIds","facts","selectedFact","reducers","state","action","type","selectedIndex","indexOf","length","undefined","id","payload","_id","exists","Routes","routesMap","path","SERVER_URL","process","api","options","axiosConfig","baseURL","axios","request","getRandomFactsSaga","call","url","data","createdAt","text","updatedAt","put","types","catFactsSaga","throttle","rootSaga","all","connectRoutes","basename","enhancer","middleware","reducer","rootReducer","combineReducers","location","sagaMiddleware","saga","store","createStore","composeWithDevTools","applyMiddleware","run","useTypedSelector","useSelector","Container","styled","div","activeTheme","Circle","span","ThemeSwitcher","setActiveTheme","useContext","onClick","Header","Title","ContentContainer","BaseView","other","Fact","Date","CatFact","fact","dayjs","format","getRandomFact","NavigationButton","button","RequestFactButton","PrevNextContainer","Reference","Link","a","HomeView","dispatch","useDispatch","renderFact","href","rel","target","RootView","tree","NOT_FOUND","BaseStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3e46b73.chunk.js","sourcesContent":["import { createContext, ReactNode, useEffect, useLayoutEffect, useState } from 'react';\nimport { ThemeProvider as StyledComponentsThemeProvider } from 'styled-components';\n\nimport { themes } from '../styles/themes';\n\nexport const LOCAL_STORAGE_KEY = 'app-theme';\n\nexport enum Themes {\n  dark = 'dark',\n  light = 'light',\n}\n\ninterface WithTheme {\n  // Toggle the app theme from dark to light and vice versa\n  toggleTheme: () => void;\n}\n\ninterface ProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeContext = createContext<WithTheme>({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  toggleTheme: () => {},\n});\n\nexport const ThemeProvider = (props: ProviderProps): ReturnType<typeof ThemeContext.Provider> => {\n  const [theme, setTheme] = useState(Themes.dark);\n\n  useEffect(() => {\n    if (!localStorage.getItem(LOCAL_STORAGE_KEY)) localStorage.setItem(LOCAL_STORAGE_KEY, Themes.dark);\n  }, []);\n\n  useLayoutEffect(() => {\n    const savedTheme = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!savedTheme) return;\n    switch (savedTheme as Themes) {\n      case Themes.light:\n        setTheme(Themes.light);\n        return;\n      case Themes.dark:\n      default:\n        setTheme(Themes.dark);\n    }\n  }, []);\n\n  function toggleTheme(): void {\n    const toggleTo = theme === Themes.dark ? Themes.light : Themes.dark;\n    localStorage.setItem(LOCAL_STORAGE_KEY, toggleTo);\n    setTheme(toggleTo);\n  }\n\n  const ctx = { toggleTheme };\n\n  return (\n    <ThemeContext.Provider value={ctx}>\n      <StyledComponentsThemeProvider theme={theme === Themes.dark ? themes.dark : themes.light}>\n        {props.children}\n      </StyledComponentsThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n","import appColors from './app';\nimport themeSwitcherColors from './themeSwitcher';\n\nexport const colors = {\n  app: appColors,\n  themeSwitcher: themeSwitcherColors,\n};\n","const appColors = {\n  body: {\n    BG_COLOR: '#2a2a2e',\n    TEXT_COLOR: '#cfcfd1',\n  },\n  header: {\n    BG_COLOR: '#565656',\n  },\n};\n\nexport default appColors;\n","const themeSwitcherColors = {\n  body: {\n    normal: {\n      BG_COLOR: '#d3d3d3',\n      BORDER_COLOR: '#d3d3d3',\n    },\n    active: {\n      BG_COLOR: 'inherit',\n    },\n  },\n  circle: {\n    BG_COLOR: '#ffffff',\n    BORDER_COLOR: '#a1a1a1',\n  },\n};\n\nexport default themeSwitcherColors;\n","const appColors = {\n  body: {\n    BG_COLOR: '#cfcfd1',\n    TEXT_COLOR: '#2a2a2e',\n  },\n  header: {\n    BG_COLOR: '#565656',\n  },\n};\n\nexport default appColors;\n","import { colors as dark } from './dark';\nimport { colors as light } from './light';\n\nexport const themes = {\n  dark,\n  light,\n};\n","import { colors as dark } from '../dark';\nimport appColors from './app';\n\nexport const colors = {\n  // dark is the default theme, inherit it\n  ...dark,\n  app: appColors,\n};\n","import type { Fact } from '../../../types/CatFacts';\nimport type { Action } from '../../../types/Redux';\n\nexport const LocalActions = {\n  SELECT_NEXT_FACT: '@facts/SELECT_NEXT_FACT',\n  SELECT_PREV_FACT: '@facts/SELECT_PREV_FACT',\n} as const;\n\nexport const SagaActions = {\n  GET_RANDOM_FACT_PENDING: '@facts/GET_RANDOM_FACT_PENDING',\n  GET_RANDOM_FACT_FULFILLED: '@facts/GET_RANDOM_FACT_FULFILLED',\n  GET_RANDOM_FACT_REJECTED: '@facts/GET_RANDOM_FACT_REJECTED',\n} as const;\n\nexport interface FactState {\n  factIds: string[];\n  facts: Record<string, Pick<Fact, '_id' | 'createdAt' | 'text' | 'updatedAt'>>;\n  selectedFact: string;\n}\n\nexport type SelectNextFact = Action<typeof LocalActions.SELECT_NEXT_FACT>;\nexport type SelectPrevFact = Action<typeof LocalActions.SELECT_PREV_FACT>;\n\nexport type GetRandomFactPending = Action<typeof SagaActions.GET_RANDOM_FACT_PENDING>;\nexport type GetRandomFactFulfilled = Action<\n  typeof SagaActions.GET_RANDOM_FACT_FULFILLED,\n  Pick<Fact, '_id' | 'createdAt' | 'text' | 'updatedAt'>\n>;\nexport type GetRandomFactRejected = Action<typeof SagaActions.GET_RANDOM_FACT_REJECTED>;\n\nexport type FactActionTypes =\n  | SelectNextFact\n  | SelectPrevFact\n  | GetRandomFactPending\n  | GetRandomFactFulfilled\n  | GetRandomFactRejected;\n","import { FactActionTypes, FactState, LocalActions, SagaActions } from './types';\n\nconst initialState: FactState = {\n  factIds: [],\n  facts: {},\n  selectedFact: '',\n};\n\nexport function facts(state = initialState, action: FactActionTypes): FactState {\n  switch (action.type) {\n    case LocalActions.SELECT_NEXT_FACT: {\n      const selectedIndex = state.factIds.indexOf(state.selectedFact);\n      if (\n        selectedIndex === -1 ||\n        selectedIndex + 1 >= state.factIds.length ||\n        state.factIds[selectedIndex + 1] === undefined\n      )\n        return { ...state, selectedFact: state.factIds[0] };\n      return { ...state, selectedFact: state.factIds[selectedIndex + 1] };\n    }\n    case LocalActions.SELECT_PREV_FACT: {\n      const selectedIndex = state.factIds.indexOf(state.selectedFact);\n      if (selectedIndex === -1 || selectedIndex - 1 < 0 || state.factIds[selectedIndex - 1] === undefined)\n        return { ...state, selectedFact: state.factIds[state.factIds.length - 1] };\n      return { ...state, selectedFact: state.factIds[selectedIndex - 1] };\n    }\n    case SagaActions.GET_RANDOM_FACT_FULFILLED: {\n      const id = action.payload._id;\n      const exists = state.factIds.indexOf(id) !== -1;\n      return {\n        ...state,\n        factIds: exists ? state.factIds : [...state.factIds, id],\n        facts: exists ? state.facts : { ...state.facts, [id]: action.payload },\n        selectedFact: id,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { facts } from './facts/reducers';\n\nexport const reducers = {\n  facts,\n};\n","import type { RoutesMap } from 'redux-first-router';\n\nexport const Routes = {\n  HOME: '@route/HOME',\n} as const;\n\nexport const routesMap: RoutesMap = {\n  [Routes.HOME]: {\n    path: '/',\n  },\n};\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nconst SERVER_URL = `${process.env.REACT_APP_SERVER_PROTOCOL}://${process.env.REACT_APP_SERVER_URL}:${process.env.REACT_APP_SERVER_PORT}`;\n\nexport function api<T extends unknown = Record<string, unknown>>(\n  options: AxiosRequestConfig = {},\n): Promise<AxiosResponse<T>> {\n  const axiosConfig: AxiosRequestConfig = {\n    baseURL: SERVER_URL,\n    ...options,\n  };\n  return axios.request(axiosConfig);\n}\n","import type { AxiosResponse } from 'axios';\nimport { call, put, throttle } from 'redux-saga/effects';\n\nimport type { Fact } from '../../types/CatFacts';\nimport { api } from '../../utilities/api';\nimport * as types from '../modules/facts/types';\n\nexport function* getRandomFactsSaga() {\n  try {\n    const { data }: AxiosResponse<Fact> = yield call(api, { url: '/facts/random' });\n    const { _id, createdAt, text, updatedAt } = data;\n    yield put<types.GetRandomFactFulfilled>({\n      type: types.SagaActions.GET_RANDOM_FACT_FULFILLED,\n      payload: { _id, createdAt, text, updatedAt },\n    });\n  } catch (error) {\n    yield put<types.GetRandomFactRejected>({ type: types.SagaActions.GET_RANDOM_FACT_REJECTED });\n  }\n}\n\nexport const catFactsSaga = [throttle(5000, types.SagaActions.GET_RANDOM_FACT_PENDING, getRandomFactsSaga)];\n","import { all } from 'redux-saga/effects';\n\nimport { catFactsSaga } from './catFacts';\n\nexport function* rootSaga() {\n  yield all([...catFactsSaga]);\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { connectRoutes } from 'redux-first-router';\nimport saga from 'redux-saga';\n\nimport { reducers } from './modules';\nimport { routesMap } from './routing/routesMap';\nimport { rootSaga } from './saga';\n\nconst { enhancer, middleware, reducer } = connectRoutes(routesMap, {\n  basename: process.env.PUBLIC_URL || '/',\n});\nconst rootReducer = combineReducers({ location: reducer, ...reducers });\nconst sagaMiddleware = saga();\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(enhancer, applyMiddleware(sagaMiddleware, middleware)),\n);\n\nexport type LocationState = ReturnType<typeof reducer>;\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nsagaMiddleware.run(rootSaga);\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport type { RootState } from '../redux/configureStore';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { HTMLAttributes, ReactElement, useContext, useLayoutEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { LOCAL_STORAGE_KEY, ThemeContext, Themes } from '../contexts/Theme';\n\nconst Container = styled.div<{ activeTheme: Themes }>`\n  border: 1px solid ${(props) => props.theme.themeSwitcher.body.normal.BORDER_COLOR};\n  border-radius: 8px;\n  height: 30px;\n  width: 70px;\n  position: relative;\n  cursor: pointer;\n  background-color: ${({ activeTheme, theme }) =>\n    activeTheme === Themes.dark ? theme.themeSwitcher.body.active.BG_COLOR : theme.themeSwitcher.body.normal.BG_COLOR};\n`;\n\nconst Circle = styled.span<{ activeTheme: Themes }>`\n  height: 100%;\n  width: 30px;\n  border-radius: 50%;\n  background-color: ${(props) => props.theme.themeSwitcher.circle.BG_COLOR};\n  border: 1px solid ${(props) => props.theme.themeSwitcher.circle.BORDER_COLOR};\n  display: block;\n  position: absolute;\n  ${({ activeTheme }) => (activeTheme === Themes.dark ? 'left: 0;' : 'right: 0;')};\n`;\n\nexport const ThemeSwitcher = (\n  props: Omit<HTMLAttributes<HTMLDivElement>, 'children'>,\n): ReactElement<HTMLDivElement> => {\n  const [activeTheme, setActiveTheme] = useState<Themes>(Themes.dark);\n  const { toggleTheme } = useContext(ThemeContext);\n\n  useLayoutEffect(() => {\n    const savedTheme = localStorage.getItem(LOCAL_STORAGE_KEY);\n    const isTheme = (theme: unknown): theme is Themes => theme === Themes.dark || theme === Themes.light;\n    if (isTheme(savedTheme)) setActiveTheme(savedTheme);\n  }, []);\n\n  function onClick(): void {\n    toggleTheme();\n    setActiveTheme(activeTheme === Themes.dark ? Themes.light : Themes.dark);\n  }\n\n  return (\n    <Container activeTheme={activeTheme} onClick={onClick} {...props}>\n      <Circle activeTheme={activeTheme} />\n    </Container>\n  );\n};\n","import { HTMLAttributes, ReactElement } from 'react';\nimport styled from 'styled-components';\n\nimport { ThemeSwitcher } from '../components/ThemeSwitcher';\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  height: 100%;\n`;\n\nconst Header = styled.div`\n  height: 50px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${(props) => props.theme.app.header.BG_COLOR};\n  padding: 0 20px;\n  flex-shrink: 0;\n`;\n\nconst Title = styled.span`\n  font-size: 32px;\n`;\n\nconst ContentContainer = styled.div`\n  margin: 0 20px;\n  height: 100%;\n`;\n\nexport const BaseView = ({ children, ...other }: HTMLAttributes<HTMLDivElement>): ReactElement<HTMLDivElement> => {\n  return (\n    <Container {...other}>\n      <Header>\n        <Title>🐱</Title>\n        <ThemeSwitcher />\n      </Header>\n      <ContentContainer>{children}</ContentContainer>\n    </Container>\n  );\n};\n","import dayjs from 'dayjs';\nimport { HTMLAttributes, ReactElement } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  createdAt: string;\n  fact: string;\n}\n\nconst Container = styled.div`\n  border: 1px solid ${(props) => props.theme.app.body.TEXT_COLOR};\n  border-radius: 6px;\n  display: flex;\n  flex-flow: column nowrap;\n  padding: 12px;\n`;\n\nconst Fact = styled.span`\n  font-size: 42px;\n  font-weight: 600;\n  text-align: center;\n  margin-bottom: 10px;\n  word-wrap: break-word;\n`;\n\nconst Date = styled.span`\n  text-align: right;\n  font-size: 12px;\n`;\n\nexport const CatFact = ({\n  createdAt,\n  fact,\n  ...other\n}: Props & HTMLAttributes<HTMLDivElement>): ReactElement<HTMLDivElement> => (\n  <Container {...other}>\n    <Fact>{fact}</Fact>\n    <Date>Submitted on {dayjs(createdAt).format('YYYY-MM-DD')}</Date>\n  </Container>\n);\n","import { FactActionTypes, LocalActions, SagaActions } from './types';\n\nexport const selectPrevFact = (): FactActionTypes => ({\n  type: LocalActions.SELECT_PREV_FACT,\n});\n\nexport const selectNextFact = (): FactActionTypes => ({\n  type: LocalActions.SELECT_NEXT_FACT,\n});\n\nexport const getRandomFact = (): FactActionTypes => ({\n  type: SagaActions.GET_RANDOM_FACT_PENDING,\n});\n","import { ReactElement, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { CatFact } from '../components/CatFact';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getRandomFact, selectNextFact, selectPrevFact } from '../redux/modules/facts/actions';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  padding: 30px 0;\n`;\n\nconst NavigationButton = styled.button`\n  border: none;\n  border-radius: 6px;\n  height: 36px;\n`;\n\nconst RequestFactButton = styled(NavigationButton)`\n  margin-bottom: 10px;\n  flex-shrink: 0;\n`;\n\nconst PrevNextContainer = styled.div`\n  display: flex;\n  margin-bottom: 10px;\n  flex-shrink: 0;\n\n  > button {\n    flex: 1 1 auto;\n\n    &:not(:last-of-type) {\n      margin-right: 10px;\n    }\n  }\n`;\n\nconst Reference = styled.span`\n  margin-top: auto;\n`;\n\nconst Link = styled.a`\n  &,\n  &:hover,\n  &:active,\n  &:visited {\n    color: inherit;\n  }\n`;\n\nexport const HomeView = (): ReactElement<HTMLDivElement> => {\n  const { factIds, facts, selectedFact } = useTypedSelector((state) => ({\n    factIds: state.facts.factIds,\n    facts: state.facts.facts,\n    selectedFact: state.facts.selectedFact,\n  }));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getRandomFact());\n  }, [dispatch]);\n\n  function renderFact(): ReturnType<typeof CatFact> | null {\n    if (factIds.length === 0 || factIds.indexOf(selectedFact) === -1) return null;\n    const fact = facts[selectedFact];\n    return <CatFact createdAt={fact.createdAt} fact={fact.text} />;\n  }\n\n  function onClickRequest(): void {\n    dispatch(getRandomFact());\n  }\n\n  function onClickPrevious(): void {\n    dispatch(selectPrevFact());\n  }\n\n  function onClickNext(): void {\n    dispatch(selectNextFact());\n  }\n\n  return (\n    <Container>\n      <RequestFactButton onClick={onClickRequest}>Request random fact</RequestFactButton>\n      {factIds.length > 2 && (\n        <PrevNextContainer>\n          <NavigationButton onClick={onClickPrevious}>Select previous fact</NavigationButton>\n          <NavigationButton onClick={onClickNext}>Select next fact</NavigationButton>\n        </PrevNextContainer>\n      )}\n      {renderFact()}\n      <Reference>\n        Cat facts provided by{' '}\n        <Link href=\"https://cat-fact.herokuapp.com\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">\n          Cat Facts\n        </Link>\n      </Reference>\n    </Container>\n  );\n};\n","import { ReactNode } from 'react';\nimport { NOT_FOUND } from 'redux-first-router';\n\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { Routes } from '../redux/routing/routesMap';\nimport { BaseView } from './BaseView';\nimport { HomeView } from './HomeView';\n\nfunction wrapBaseView(tree: ReactNode): ReturnType<typeof BaseView> {\n  return <BaseView>{tree}</BaseView>;\n}\n\nexport const RootView = (): JSX.Element | null => {\n  const locationType = useTypedSelector((state) => state.location.type);\n\n  switch (locationType) {\n    case Routes.HOME:\n      return wrapBaseView(<HomeView />);\n    case NOT_FOUND:\n    default:\n      return null;\n  }\n};\n","import { Provider } from 'react-redux';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { ThemeProvider } from './contexts/Theme';\nimport { store } from './redux/configureStore';\nimport { RootView } from './views/RootView';\n\nconst BaseStyle = createGlobalStyle`\n  body {\n    background-color: ${(props) => props.theme.app.body.BG_COLOR};\n    color: ${(props) => props.theme.app.body.TEXT_COLOR};\n  }\n`;\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider>\n        <BaseStyle />\n        <RootView />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './styles/index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}